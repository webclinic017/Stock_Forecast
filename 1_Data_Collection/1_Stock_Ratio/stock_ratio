#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon May 31 22:05:39 2021

@author: Aron
"""


# % 讀取套件 -------
import pandas as pd
import numpy as np
import sys, time, os, gc


local = False
local = True


# Path .....
if local == True:
    path = '/Users/Aron/Documents/GitHub/Data/Stock_Forecast/'
else:
    path = '/home/aronhack/stock_forecast/dashboard/'


# Codebase ......
path_codebase = [r'/Users/Aron/Documents/GitHub/Arsenal/',
                 r'/Users/Aron/Documents/GitHub/Codebase_YZ/',
                 path + 'Function/']


for i in path_codebase:    
    if i not in sys.path:
        sys.path = [i] + sys.path


import codebase_yz as cbyz
import arsenal as ar
import arsenal_stock as stk





# 自動設定區 -------
pd.set_option('display.max_columns', 30)
 

# 新增工作資料夾
global path_resource, path_function, path_temp, path_export
path_resource = path + '/Resource'
path_function = path + '/Function'
path_temp = path + '/Temp'
path_export = path + '/Export'


cbyz.os_create_folder(path=[path_resource, path_function, 
                         path_temp, path_export])      



def load_data():
    '''
    讀取資料及重新整理
    '''
    return ''



def master():
    '''
    主工作區
    '''
    
    return ''




def check():
    '''
    資料驗證
    '''    
    return ''




if __name__ == '__main__':
    master()




# 股本大小 ......

stock_info = stk.tw_get_stock_info(export_file=True, load_file=True, 
                                   file_name=None, path=None)


stock_info = stock_info.sort_values(by=['CAPITAL']) \
            .reset_index(drop=True)




from sklearn.cluster import MiniBatchKMeans
import numpy as np
X = np.array([[1, 2], [1, 4], [1, 0],
              [4, 2], [4, 0], [4, 4],
              [4, 5], [0, 1], [2, 2],
              [3, 2], [5, 5], [1, -1]])

# manually fit on batches
kmeans = MiniBatchKMeans(n_clusters=3,
                         random_state=0,
                         batch_size=6)


kmeans = kmeans.fit(stock_info['CAPITAL'])

kmeans = kmeans.partial_fit(X[0:6,:])
kmeans = kmeans.partial_fit(X[6:12,:])
kmeans.cluster_centers_



# manually fit on batches
kmeans = MiniBatchKMeans(n_clusters=3,
                         random_state=0,
                         batch_size=6)

capital = np.array(stock_info['CAPITAL']).reshape(-1, 1)

kmeans = kmeans.fit(capital)
center = kmeans.cluster_centers_

level = kmeans.fit_predict(capital)


result = pd.DataFrame({'CAPITAL_LEVEL_KMENAS':level})
result['CAPITAL'] = stock_info['CAPITAL']
result['TEMP'] = 1

result = cbyz.cluster_sort_group(df=result, value_col='CAPITAL', 
                        group_col='TEMP', center=center)

result = result['CLUSTER'] \
        .sort_values(by='CAPITAL') \
        .reset_index(drop=True)





# %% Test Spotify API ------

import requests


url = 'https://api.spotify.com/v1/search?q=data&type=playlist' + auth

# url = "https://api.spotify.com/v1/search?query=tania+bowra&offset=0&limit=20&type=artist"

response = requests.get(url)
response


'https://accounts.spotify.com/authorize?client_id='+client_id \
    +'&response_type=code&redirect_uri=https%3A%2F%2Fexample.com%2Fcallback&scope=user-read-private%20user-read-email&state=34fFs29kd09'





client_id = "&Authorization=c419a67ee4b34a96b6e19106350ef42c"
secret = "9ad64d7327404e8985d9cab0c63db8df"



import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
cid = client_id
secret = secret
client_credentials_manager = SpotifyClientCredentials(client_id=cid, client_secret=secret)
sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)


artist_name = []
track_name = []
popularity = []
track_id = []
for i in range(0,500,50):
    track_results = sp.search(q='year:2018', type='track', limit=50,offset=i)
    for i, t in enumerate(track_results['tracks']['items']):
        artist_name.append(t['artists'][0]['name'])
        track_name.append(t['name'])
        track_id.append(t['id'])
        popularity.append(t['popularity'])




# %% 集保比例 ......


from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from bs4 import BeautifulSoup



from selenium.webdriver.support.ui import Select





link = 'https://www.tdcc.com.tw/portal/zh/smWeb/qryStock'
  

webdriver_path = '/Users/Aron/Documents/GitHub/Arsenal/geckodriver'
driver = webdriver.Firefox(executable_path=webdriver_path)
driver.get(link)



# Date ......
date_li = []
dropdown = driver.find_element_by_name("scaDate")
options = [x for x in dropdown.find_elements_by_tag_name("option")]

for option in options:
    date_li.append(option.get_attribute("value"))
    
    
date_li.sort(reverse=True) 
# driver.find_element_by_xpath("//select[@name='scaDate']/option[text()='20201016']").click()


# Stock Symbol ......
symbols = stk.twse_get_data()
symbols = symbols['STOCK_SYMBOL'].tolist()


# Query ......
result = pd.DataFrame()

for i in range(len(date_li)):
    
    # Date
    d = date_li[i]
    driver.find_element_by_xpath("//select[@name='scaDate']/option[text()='" \
                                 + d + "']").click()

    for s in symbols:
        
        # 抓一小段資料後，網址可能會自動跳轉
        if driver.current_url != link:
            driver.get(link)
            time.sleep(2)
        
        
        # 在輸入symbol的時候，因為網頁會跳出自動選單，所以可能會出錯，像是1109
        symbol_input = driver.find_element_by_id("StockNo")
        symbol_input.clear()
        symbol_input.send_keys(s)        


        # Submit .....
        submit = driver.find_element_by_css_selector("input[type='submit']")
        submit.submit() 


        count = 0
        while 2 > 1:
            
            if count > 5:
                break
            
            try:
                # Table .....
                table = driver.find_element_by_class_name('table')
                html = table.get_attribute('outerHTML')
                soup = BeautifulSoup(html, 'html.parser')
                count = count + 1
            except:
                time.sleep(2)
            else:
                break
        
        new_df = pd.read_html(str(soup))[0]
        new_df['STOCK_SYMBOL'] = s
        new_df['WORK_DATE'] = d
        
        result = result.append(new_df)
        time.sleep(2)

print(str(i) + '/' + str(len(date_li)))



# 確認1109 / 20210625的資料有沒有進來



b.find_element_by_xpath("//select[@name='element_name']/option[text()='option_text']").click()


driver.close()



results = results[1]
results.columns = ['STOCK_SYMBOL', 'COMPANY', 'PRICE', 'CAPTITAL',
             'LISTING_DATE', 'INDUSTRY', 'MARKET']






# %% Dev --------

symbols = stk.get_data(data_begin=20210701, data_end=20210701,
                       price_change=True, price_limit=True)

symbols


chk = symbols[symbols['LIMIT_UP']==1]
chk
